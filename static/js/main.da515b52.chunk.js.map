{"version":3,"sources":["components/UI/table/Caret.js","components/UI/table/Table.js","components/UI/form/Form.js","pages/Activity1.js","pages/Activity2.js","pages/Activity3.js","App.js","reportWebVitals.js","index.js"],"names":["CaretUp","viewBox","focusable","data-icon","width","height","fill","aria-hidden","d","CaretDown","Table","data","useState","sort","setSort","tableData","setTableData","columns","Object","keys","useEffect","handleColumnClick","e","columnKey","target","getAttribute","direction","sorted","a","b","toString","localeCompare","prev","className","cellPadding","cellSpacing","map","column","toLocaleLowerCase","caret","data-column-key","onClick","toLocaleUpperCase","row","i","id","Form","fields","handleFieldOnChange","handleAddRecord","handleReset","field","htmlFor","type","name","value","onChange","Activity1","dataSource","setData","query","setQuery","formData","setFormData","filteredData","filter","some","toLowerCase","indexOf","message","length","class","newData","unshift","val","Activity2","megaport","path","setPath","result","setResult","JSON","parse","stringify","undefined","object","split","key","reduce","getValue","url","setURL","isLoading","setIsLoading","href","style","response","fetch","method","headers","getLocations","then","json","catch","error","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da515b52.chunk.js","sourcesContent":["import React from 'react';\n\nconst CaretUp = () => (\n  <svg\n    viewBox=\"0 0 1024 1024\"\n    focusable=\"false\"\n    data-icon=\"caret-up\"\n    width=\"1em\"\n    height=\"1em\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n  >\n    <path d=\"M858.9 689L530.5 308.2c-9.4-10.9-27.5-10.9-37 0L165.1 689c-12.2 14.2-1.2 35 18.5 35h656.8c19.7 0 30.7-20.8 18.5-35z\"></path>\n  </svg>\n);\n\nconst CaretDown = () => (\n  <svg\n    viewBox=\"0 0 1024 1024\"\n    focusable=\"false\"\n    data-icon=\"caret-down\"\n    width=\"1em\"\n    height=\"1em\"\n    fill=\"currentColor\"\n    aria-hidden=\"true\"\n  >\n    <path d=\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\"></path>\n  </svg>\n);\n\nexport { CaretUp, CaretDown };\n","import React, { useEffect, useState } from 'react';\nimport { CaretUp, CaretDown } from './Caret';\n\nimport './Table.css';\n\nconst Table = ({ data }) => {\n  const [sort, setSort] = useState({});\n  const [tableData, setTableData] = useState({});\n  const columns = tableData[0] && Object.keys(tableData[0]);\n\n  useEffect(() => {\n    setTableData(data);\n  }, [data]);\n\n  const handleColumnClick = (e) => {\n    const columnKey = e.target.getAttribute('data-column-key');\n\n    const direction = !sort[columnKey]\n      ? 'asc'\n      : sort[columnKey] === 'desc'\n      ? ''\n      : 'desc';\n\n    if (direction) {\n      const sorted = tableData.sort((a, b) => {\n        const reverse = direction === 'asc' ? 1 : -1;\n        return reverse * a[columnKey].toString().localeCompare(b[columnKey]);\n      });\n      setTableData(sorted);\n    } else {\n      setTableData(data);\n    }\n\n    setSort((prev) => ({ ...prev, [columnKey]: direction }));\n  };\n\n  const renderColumns = () =>\n    columns &&\n    columns.map((column) => {\n      const columnKey = column.toLocaleLowerCase();\n      const direction = sort[columnKey];\n      let caret = () => null;\n      switch (direction) {\n        case 'asc':\n          caret = () => <CaretUp />;\n          break;\n        case 'desc':\n          caret = () => <CaretDown />;\n          break;\n        default:\n          break;\n      }\n\n      return (\n        <th\n          key={column}\n          data-column-key={column.toLocaleLowerCase()}\n          onClick={handleColumnClick}\n        >\n          {column.toLocaleUpperCase()}\n          <span className=\"caret\">{caret()}</span>\n        </th>\n      );\n    });\n\n  const renderRows = () =>\n    tableData[0] &&\n    tableData.map((row, i) => (\n      <tr key={`${i}_${row.id}`}>\n        {columns.map((column) => (\n          <td>{row[column]}</td>\n        ))}\n      </tr>\n    ));\n\n  return (\n    <div className=\"table-container\">\n      <table cellPadding={0} cellSpacing={0}>\n        <thead>\n          <tr>{renderColumns()}</tr>\n        </thead>\n        <tbody>{renderRows()}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import React from 'react';\n\nimport './Form.css';\n\nexport default function Form({\n  data,\n  fields,\n  handleFieldOnChange,\n  handleAddRecord,\n  handleReset,\n}) {\n  return (\n    <form>\n      {fields.map((field) => {\n        return (\n          <div className=\"field\">\n            <label htmlFor={field}>{field.toLocaleUpperCase()}:</label>\n            <input\n              id={field}\n              type=\"text\"\n              name={field}\n              value={data[field] || ''}\n              onChange={handleFieldOnChange}\n            />\n          </div>\n        );\n      })}\n      <button type=\"button\" onClick={handleAddRecord}>\n        Add\n      </button>\n      <button type=\"button\" onClick={handleReset}>\n        Reset\n      </button>\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport Table from '../components/UI/table/Table';\nimport Form from '../components/UI/form/Form';\n\nimport dataSource from '../data/bake.json';\n\nexport default function Activity1() {\n  const [data, setData] = useState(dataSource);\n  const [query, setQuery] = useState('');\n  const [formData, setFormData] = useState({});\n  const columns = data[0] && Object.keys(data[0]);\n\n  const applyFilter = (rows) =>\n    rows.filter((row) =>\n      columns.some(\n        (column) => row[column].toLowerCase().indexOf(query.toLowerCase()) > -1\n      )\n    );\n\n  const handelOnChange = (e) => {\n    const val = e.target.value;\n    setQuery(val);\n  };\n\n  const handleFieldOnChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleAddRecord = () => {\n    const newData = [...data];\n    newData.unshift(formData);\n    setData(newData);\n    handleReset();\n  };\n\n  const handleReset = () => {\n    setFormData({});\n  };\n\n  const filteredData = applyFilter(data);\n  const message = filteredData.length || 'No ';\n\n  return (\n    <div class=\"container\">\n      <h2>Activity 1</h2>\n      <ul>\n        <li>Take the following data and format it into a table</li>\n        <li>\n          Add toggles to sort by id, type and batter (both ascending and\n          descending)\n        </li>\n        <li>Add a text input to filter the data</li>\n        <li>Add a form to collect new baked goods</li>\n        <li>Make the elements look nice using CSS</li>\n      </ul>\n      <Form\n        fields={columns}\n        data={formData}\n        handleFieldOnChange={handleFieldOnChange}\n        handleAddRecord={handleAddRecord}\n        handleReset={handleReset}\n      />\n      <Table data={filteredData} />\n      <div className=\"filter\">\n        <label>Filter:</label>\n        <input type=\"text\" value={query} onChange={handelOnChange} />\n        <div className=\"results\">{message} results</div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport megaport from '../data/megaport.json';\n\n/**\n * get the value of the property\n * @param {String} path - the object path ie. 'address.office.state'\n * @obj {Object} the object\n */\nfunction getValue(object, path) {\n  if (typeof path === 'string')\n    path = path.split('.').filter((key) => key.length);\n  return path.reduce((object, key) => object && object[key], object);\n}\n\nexport default function Activity2() {\n  const [data, setData] = useState(megaport);\n  const [path, setPath] = useState();\n  const [result, setResult] = useState();\n\n  const handelOnChange = (e) => {\n    setPath(e.target.value);\n  };\n\n  const handleTextAreaChange = (e) => {\n    setData(JSON.parse(e.target.value));\n  };\n\n  const handleOnClick = () => {\n    const val = getValue(data, path);\n    setResult(JSON.stringify(val));\n  };\n\n  return (\n    <div class=\"container\">\n      <h2>Activity 2</h2>\n      <p>\n        Given a path to a property of an object, write a function that returns\n        the value of the property. The function should accept a parameter of the\n        path and optionally the object you are searching in.\n      </p>\n      <textarea\n        onChange={handleTextAreaChange}\n        value={JSON.stringify(data, undefined, 4)}\n      />\n      <div className=\"filter\">\n        <label htmlFor=\"path\">Path:</label>\n        <input id=\"path\" type=\"text\" value={path} onChange={handelOnChange} />\n        <button type=\"button\" onClick={handleOnClick}>\n          Find\n        </button>\n        {result && <div className=\"results\">Found: {result}</div>}\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\n\nfunction getLocations(url) {\n  return fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n}\n\nexport default function Activity2() {\n  const [url, setURL] = useState('https://api.megaport.com/v2/locations');\n  const [isLoading, setIsLoading] = useState(false);\n  const [result, setResult] = useState();\n\n  const handleOnChange = (e) => {\n    setURL(e.target.value);\n  };\n  const handleOnClick = () => {\n    const response = getLocations(url);\n    setIsLoading(true);\n\n    response\n      .then((response) => response.json())\n      .then((data) => {\n        setIsLoading(false);\n        setResult(JSON.stringify(data, undefined, 4));\n      })\n      .catch((error) => {\n        setIsLoading(false);\n        setResult(`Error: ${error}`);\n      });\n  };\n\n  const message = isLoading ? 'Loading...' : result;\n\n  return (\n    <div class=\"container\">\n      <h2>Activity 3</h2>\n      <p>\n        Write a reusable fetch function that GETs the list of Megaport enabled\n        locations from the following endpoint:\n        <a href=\"https://api.megaport.com/v2/locations\">\n          https://api.megaport.com/v2/locations\n        </a>{' '}\n        The function should be asynchronous and return either the result or an\n        error.\n      </p>\n      <input\n        type=\"text\"\n        style={{ width: '30%' }}\n        value={url}\n        onChange={handleOnChange}\n      ></input>\n      <button type=\"button\" onClick={handleOnClick}>\n        Go\n      </button>\n      <textarea value={message} />\n    </div>\n  );\n}\n","import Activity1 from './pages/Activity1';\nimport Activity2 from './pages/Activity2';\nimport Activity3 from './pages/Activity3';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Activity1 />\n      <Activity2 />\n      <Activity3 />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}